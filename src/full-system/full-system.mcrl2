% Railway Crossing Model
% Group 8

%STAY_STATE: state of the system remains the same (loop back), these might be optimized in the future
%ERROR_STATE: state of the system is non trivial and should not occur during regular operation

%NOTE: So in an error state, the system might still remain in the same state (do a loop back), but it might also try to correct the system.

sort State = struct on | off;
	 State_train = struct approaching_ltr | occupied_ltr | leaving_ltr | exit_ltr |
						  approaching_rtl | occupied_rtl | leaving_rtl | exit_rtl | idle;
	 Train = struct train | no_train;
	 TrackID = struct t1 | t2;
	 SensorID = struct s1 | s2 | s3;

map opp: State -> State;

eqn opp(on) = off;
	opp(off) = on;

%Helper actions
act set_sensors: SensorID # State;

act tx_lights,rx_lights,comm_lights: State;
	tx_bells,rx_bells,comm_bells: State;
	tx_bellsl,rx_bellsl,comm_bellsl: State;
	tx_bellsba,rx_bellsba,comm_bellsba: State;
	tx_barriers,rx_barriers,comm_barriers: State;
	tx_sensors, rx_sensors, comm_sensors: TrackID # Train;
	tx_sensors_agg, rx_sensors_agg, comm_sensors_agg: Train;
	done, error;

% Global Outside Actions
act turnon_lights, turnoff_lights,
	turnon_bells, turnoff_bells,
	lower_barriers, raise_barriers;

proc SENSORS(id: TrackID, train_state: State_train, sens1: State, sens2: State, sens3: State) =
%train from left to right
 ((sens1 == on ) && (sens2 == off) && (sens3 == off) && (train_state == idle))            -> tx_sensors(id,   train) . SENSORS(train_state = approaching_ltr)
+(                  (sens2 == on ) && (sens3 == off) && (train_state == approaching_ltr)) -> tx_sensors(id,   train) . SENSORS(train_state = occupied_ltr)
+((sens1 == off) && (sens2 == off) &&                   (train_state == occupied_ltr))    -> tx_sensors(id,no_train) . SENSORS(train_state = leaving_ltr)
+((sens1 == off) && (sens2 == off) && (sens3 == on )   && (train_state == leaving_ltr))     -> tx_sensors(id,no_train) . SENSORS(train_state = exit_ltr)
+((sens1 == off) && (sens2 == off) && (sens3 == off) && (train_state == exit_ltr))        -> tx_sensors(id,no_train) . SENSORS(train_state = idle)

%train from right to left
+((sens1 == off) && (sens2 == off) && (sens3 == on ) && (train_state == idle))            -> tx_sensors(id,   train) . SENSORS(train_state = approaching_rtl)
+((sens1 == off) && (sens2 == on )                   && (train_state == approaching_rtl)) -> tx_sensors(id,   train) . SENSORS(train_state = occupied_rtl)
+(                  (sens2 == off) && (sens3 == off) && (train_state == occupied_rtl))    -> tx_sensors(id,no_train) . SENSORS(train_state = leaving_rtl)
+((sens1 == on ) && (sens2 == off) && (sens3 == off) && (train_state == leaving_rtl))     -> tx_sensors(id,no_train) . SENSORS(train_state = exit_rtl)
+((sens1 == off) && (sens2 == off) && (sens3 == off) && (train_state == exit_rtl))        -> tx_sensors(id,no_train) . SENSORS(train_state = idle)

%Full

%+ ((train_state == idle)||(train_state == leaving_rtl))        ->  set_sensors(s1,on) . SENSORS(sens1=on)
%+ ((train_state == approaching_ltr)||(train_state == exit_rtl))        ->  set_sensors(s1,off) . SENSORS(sens1=off)

%+ ((train_state == approaching_rtl)||(train_state == approaching_ltr))        -> set_sensors(s2,on) . SENSORS(sens2=on)
%+ ((train_state == occupied_rtl)||(train_state == occupied_ltr))        ->  set_sensors(s2,off) . SENSORS(sens2=off)

%+ ((train_state == idle)||(train_state == leaving_ltr))        ->  set_sensors(s3,on) . SENSORS(sens3=on)
%+ ((train_state == approaching_rtl)||(train_state == exit_ltr))        ->  set_sensors(s3,off) . SENSORS(sens3=off)

%Left to Right only

+ ((train_state == idle))        ->  set_sensors(s1,on) . SENSORS(sens1=on)
+ ((train_state == approaching_ltr))        ->  set_sensors(s1,off) . SENSORS(sens1=off)

+ ((train_state == approaching_ltr))        -> set_sensors(s2,on) . SENSORS(sens2=on)
+ ((train_state == occupied_ltr))        ->  set_sensors(s2,off) . SENSORS(sens2=off)

+ ((train_state == leaving_ltr))        ->  set_sensors(s3,on) . SENSORS(sens3=on)
+ ((train_state == exit_ltr))        ->  set_sensors(s3,off) . SENSORS(sens3=off)
;


proc SENSORAGGREGATOR(track1:Train,track2:Train) =
(((track1 == no_train ) && (track2 == no_train)) -> tx_sensors_agg(no_train) . SENSORAGGREGATOR()
<> tx_sensors_agg(train) . SENSORAGGREGATOR())

+ sum t: Train . rx_sensors(t1,t) . SENSORAGGREGATOR(track1 = t)
+ sum t: Train . rx_sensors(t2,t) . SENSORAGGREGATOR(track2 = t);

proc LIGHTS(stateL: State,stateBe: State,T : Train) =
%STAY_STATE ((stateL == on ) && (stateBe == on ) && (T ==    train)) -> tx_lights(   (stateL)) . LIGHTS(stateL=   (stateL))						%STAY_STATE
%STAY_STATE+((stateL == on ) && (stateBe == on ) && (T == no_train)) -> tx_lights(   (stateL)) . LIGHTS(stateL=   (stateL))						%STAY_STATE
%STAY_STATE+((stateL == on ) && (stateBe == off) && (T ==    train)) -> tx_lights(   (stateL)) . LIGHTS(stateL=   (stateL))						%STAY_STATE
 ((stateL == on ) && (stateBe == off) && (T == no_train)) -> tx_lights(opp(stateL)) . turnoff_lights . done . LIGHTS(stateL=opp(stateL))
+((stateL == off) && (stateBe == on ) && (T ==    train)) -> error . delta%tx_lights(opp(stateL)) . LIGHTS(stateL=opp(stateL))						%ERROR_STATE
+((stateL == off) && (stateBe == on ) && (T == no_train)) -> error . delta%tx_lights(   (stateL)) . LIGHTS(stateL=   (stateL))						%ERROR_STATE
+((stateL == off) && (stateBe == off) && (T ==    train)) -> tx_lights(opp(stateL)) . turnon_lights . LIGHTS(stateL=opp(stateL))
%STAY_STATE+((stateL == off) && (stateBe == off) && (T == no_train)) -> tx_lights(   (stateL)) . LIGHTS(stateL=   (stateL))						%STAY_STATE
+ sum s: State . rx_bellsl(s) . LIGHTS(stateBe=s)
+ sum t: Train . rx_sensors_agg(t) . LIGHTS(T = t);

proc BELLS(stateBe: State,stateL: State,stateBa: State, T : Train) =
%STAY_STATE ((stateBe == on ) && (stateL == on ) && (stateBa == on ) && (T ==    train)) -> tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%STAY_STATE
%STAY_STATE+((stateBe == on ) && (stateL == on ) && (stateBa == on ) && (T == no_train)) -> tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%STAY_STATE
%STAY_STATE+((stateBe == on ) && (stateL == on ) && (stateBa == off) && (T ==    train)) -> tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%STAY_STATE
%casper ((stateBe == on ) && (stateL == on ) && (stateBa == off) && (T == no_train)) -> tx_bells(opp(stateBe)) . turnoff_bells . BELLS(stateBe=opp(stateBe))
 ((stateBe == on ) && (stateL == on ) && (stateBa == off) && (T == no_train)) -> change_state_bells . turnoff_bells . BELLS(stateBe=opp(stateBe))
+((stateBe == on ) && (stateL == off) && (stateBa == on ) && (T ==    train)) -> tx_bells(   (stateBe)) . error . delta%BELLS(stateBe=   (stateBe))	%ERROR_STATE
+((stateBe == on ) && (stateL == off) && (stateBa == on ) && (T == no_train)) -> tx_bells(   (stateBe)) . error . delta%BELLS(stateBe=   (stateBe))	%ERROR_STATE
+((stateBe == on ) && (stateL == off) && (stateBa == off) && (T ==    train)) -> tx_bells(   (stateBe)) . error . delta%BELLS(stateBe=   (stateBe))	%ERROR_STATE
+((stateBe == on ) && (stateL == off) && (stateBa == off) && (T == no_train)) -> tx_bells(opp(stateBe)) . error . delta%BELLS(stateBe=opp(stateBe))	%ERROR_STATE

+((stateBe == off) && (stateL == on ) && (stateBa == on ) && (T ==    train)) -> error . delta%tx_bells(opp(stateBe)) . BELLS(stateBe=opp(stateBe))	%ERROR_STATE
+((stateBe == off) && (stateL == on ) && (stateBa == on ) && (T == no_train)) -> error . delta%tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%ERROR_STATE
+((stateBe == off) && (stateL == on ) && (stateBa == off) && (T ==    train)) -> tx_bells(opp(stateBe)) . turnon_bells . BELLS(stateBe=opp(stateBe))
%STAY_STATE+((stateBe == off) && (stateL == on ) && (stateBa == off) && (T == no_train)) -> tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%STAY_STATE
+((stateBe == off) && (stateL == off) && (stateBa == on ) && (T ==    train)) -> error . delta%tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%ERROR_STATE
+((stateBe == off) && (stateL == off) && (stateBa == on ) && (T == no_train)) -> error . delta%tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%ERROR_STATE
%STAY_STATE+((stateBe == off) && (stateL == off) && (stateBa == off) && (T ==    train)) -> tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%STAY_STATE
%STAY_STATE+((stateBe == off) && (stateL == off) && (stateBa == off) && (T == no_train)) -> tx_bells(   (stateBe)) . BELLS(stateBe=   (stateBe))	%STAY_STATE
+ sum s: State . rx_lights(s) . BELLS(stateL=s)
+ sum s: State . rx_barriers(s) . BELLS(stateBa=s)
+ sum t: Train . rx_sensors_agg(t) . BELLS(T = t);

proc BARRIERS(stateBa: State,stateBe: State,T : Train) =
%STAY_STATE ((stateBa == on ) && (stateBe == on ) && (T ==    train)) -> tx_barriers(   (stateBa)) . BARRIERS(stateBa=   (stateBa))				%STAY_STATE
												% ((stateBa == on ) && (stateBe == on ) && (T == no_train)) -> tx_barriers(opp(stateBa)) . raise_barriers . BARRIERS(stateBa=opp(stateBa))
 ((stateBa == on ) && (stateBe == on ) && (T == no_train)) -> (change_state_barrier) . BARRIERS(stateBa=opp(stateBa))
+((stateBa == on ) && (stateBe == off) && (T ==    train)) -> tx_barriers(   (stateBa)) . error . delta%BARRIERS(stateBa=   (stateBa))				%ERROR_STATE
+((stateBa == on ) && (stateBe == off) && (T == no_train)) -> tx_barriers(opp(stateBa)) . error . delta%BARRIERS(stateBa=opp(stateBa))				%ERROR_STATE
+((stateBa == off) && (stateBe == on ) && (T ==    train)) -> tx_barriers(opp(stateBa)) . lower_barriers . BARRIERS(stateBa=opp(stateBa))
%STAY_STATE+((stateBa == off) && (stateBe == on ) && (T == no_train)) -> tx_barriers(   (stateBa)) . BARRIERS(stateBa=   (stateBa))				%STAY_STATE
%STAY_STATE+((stateBa == off) && (stateBe == off) && (T ==    train)) -> tx_barriers(   (stateBa)) . BARRIERS(stateBa=   (stateBa))				%STAY_STATE
%STAY_STATE+((stateBa == off) && (stateBe == off) && (T == no_train)) -> tx_barriers(   (stateBa)) . BARRIERS(stateBa=   (stateBa))				%STAY_STATE
+ sum s: State . rx_bellsba(s) . BARRIERS(stateBe=s)
+ sum t: Train . rx_sensors_agg(t) . BARRIERS(T = t);

proc change_state_bells = tx_bellsl(off) . tx_bellsba(off);
init %hide(
	%{
		%comm_lights,
		%comm_bells,
		%comm_barriers,
		%comm_sensors,
		%comm_sensors_agg,
		%rx_sensors,
		%rx_sensors_agg,
		%rx_barriers,
		%rx_lights,
		%rx_bells,
		%tx_sensors,
		%tx_sensors_agg,
		%tx_barriers,
		%tx_lights,
		%tx_bells
	%},
	allow(
		{
			%tx_sensors,
			%tx_sensors_agg,
			%tx_barriers,
			%tx_lights,
			%tx_bells,
			comm_lights,
			comm_bellsl,
			comm_bellsba,
			comm_barriers,
			comm_sensors,
			comm_sensors_agg,
			turnon_lights,
			turnoff_lights,
			turnon_bells,
			turnoff_bells,
			lower_barriers,
			raise_barriers,
			done,
			error,
			set_sensors
		},
		comm(
			{tx_lights|rx_lights -> comm_lights,
			tx_bellsl|rx_bellsl -> comm_bellsl,
			tx_bellsba|rx_bellsba -> comm_bellsba,
			tx_barriers|rx_barriers -> comm_barriers,
			tx_sensors|rx_sensors -> comm_sensors,
			tx_sensors_agg|rx_sensors_agg -> comm_sensors_agg},
			SENSORS(t1, idle, off, off, off) ||
			SENSORS(t2, idle, off, off, off) ||
			SENSORAGGREGATOR(no_train, no_train) ||
			LIGHTS(on,on,no_train) ||
			BELLS(on,on,on,no_train) ||
			BARRIERS(on,on,no_train)
		)
	%)
);