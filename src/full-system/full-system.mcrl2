% Railway Crossing Model
% Group 8

%NOTE: So in an error state, the system might still remain in the same state (do a loop back), but it might also try to correct the system.

sort State = struct on | off;
	 State_train = struct approaching_ltr | occupied_ltr | leaving_ltr | exit_ltr |
						  approaching_rtl | occupied_rtl | leaving_rtl | exit_rtl | idle | traversing_rtl | traversing_ltr;
	 Train = struct train | no_train;
	 TrackID = struct t1 | t2;
	 SensorID = struct s_w | s_m | s_e;

map opp: State -> State;

eqn opp(on) = off;
	opp(off) = on;

%Helper actions
act set_sensors: TrackID # SensorID # State;

act tx_lights,rx_lights,comm_lights: State;
	tx_bells_to_lights,rx_bells_to_lights,comm_bells_to_lights: State;
	tx_bells_to_barriers,rx_bells_to_barriers,comm_bells_to_barriers: State;
	tx_barriers,rx_barriers,comm_barriers: State;
	tx_sensors, rx_sensors, comm_sensors: TrackID # Train;
	tx_sensors_agg_to_lights, rx_sensors_agg_to_lights, comm_sensors_agg_to_lights: Train;
	tx_sensors_agg_to_bells, rx_sensors_agg_to_bells, comm_sensors_agg_to_bells: Train;
	tx_sensors_agg_to_barriers, rx_sensors_agg_to_barriers, comm_sensors_agg_to_barriers: Train;
	done, error;

% Global Outside Actions
act turnon_lights, turnoff_lights,
	turnon_bells, turnoff_bells,
	lower_barriers, raise_barriers;

proc SENSORS(id: TrackID, train_state: State_train, sens_w: State, sens_m: State, sens_e: State) =
%train from left to right
 ((sens_w == on ) && (sens_m == off) && (sens_e == off) && (train_state ==            idle)) -> tx_sensors(id,   train) . SENSORS(train_state = approaching_ltr)
+((sens_w == off) && (sens_m == off) && (sens_e == off) && (train_state == approaching_ltr)) -> tx_sensors(id,   train) . SENSORS(train_state =  traversing_ltr)
+(                   (sens_m == on ) && (sens_e == off) && (train_state ==  traversing_ltr)) -> tx_sensors(id,   train) . SENSORS(train_state =    occupied_ltr)
+((sens_w == off) && (sens_m == off) &&                    (train_state ==    occupied_ltr)) -> tx_sensors(id,no_train) . SENSORS(train_state =     leaving_ltr)
+((sens_w == off) && (sens_m == off) && (sens_e == on ) && (train_state ==     leaving_ltr)) -> tx_sensors(id,no_train) . SENSORS(train_state =        exit_ltr)
+((sens_w == off) && (sens_m == off) && (sens_e == off) && (train_state ==        exit_ltr)) -> tx_sensors(id,no_train) . SENSORS(train_state =            idle)

%train from right to left
+((sens_w == off) && (sens_m == off) && (sens_e == on ) && (train_state ==            idle)) -> tx_sensors(id,   train) . SENSORS(train_state = approaching_rtl)
+((sens_w == off) && (sens_m == off) && (sens_e == off) && (train_state == approaching_rtl)) -> tx_sensors(id,   train) . SENSORS(train_state =  traversing_rtl)
+((sens_w == off) && (sens_m == on )                    && (train_state ==  traversing_rtl)) -> tx_sensors(id,   train) . SENSORS(train_state =    occupied_rtl)
+(                   (sens_m == off) && (sens_e == off) && (train_state ==    occupied_rtl)) -> tx_sensors(id,no_train) . SENSORS(train_state =     leaving_rtl)
+((sens_w == on ) && (sens_m == off) && (sens_e == off) && (train_state ==     leaving_rtl)) -> tx_sensors(id,no_train) . SENSORS(train_state =        exit_rtl)
+((sens_w == off) && (sens_m == off) && (sens_e == off) && (train_state ==        exit_rtl)) -> tx_sensors(id,no_train) . SENSORS(train_state =            idle)

%trigger sensors
+(((train_state == idle && sens_e == off) ||(train_state ==    leaving_rtl)) && sens_w == off) -> set_sensors(id,s_w,on ) . SENSORS(sens_w=on )
+(((train_state == approaching_ltr)       ||(train_state ==       exit_rtl)) && sens_w == off) -> set_sensors(id,s_w,off) . SENSORS(sens_w=off)

+(((train_state == traversing_rtl)        ||(train_state == traversing_ltr)) && sens_m == off) -> set_sensors(id,s_m,on ) . SENSORS(sens_m=on )
+(((train_state ==   occupied_rtl)        ||(train_state ==   occupied_ltr)) && sens_m == off) -> set_sensors(id,s_m,off) . SENSORS(sens_m=off)

+(((train_state == idle && sens_w == off) ||(train_state ==    leaving_ltr)) && sens_e == off) -> set_sensors(id,s_e,on ) . SENSORS(sens_e=on )
+(((train_state == approaching_rtl)       ||(train_state ==       exit_ltr)) && sens_e == off) -> set_sensors(id,s_e,off) . SENSORS(sens_e=off)
;


proc SENSORAGGREGATOR(track1:Train,track2:Train) =
(((track1 == no_train ) && (track2 == no_train)) -> tx_sensors_agg(no_train) . SENSORAGGREGATOR()
<> tx_sensors_agg(train) . SENSORAGGREGATOR())

+ sum t: Train . rx_sensors(t1,t) . SENSORAGGREGATOR(track1 = t)
+ sum t: Train . rx_sensors(t2,t) . SENSORAGGREGATOR(track2 = t);

proc LIGHTS(stateL: State,stateBe: State,T : Train) =
 ((stateL == on ) && (stateBe == off) && (T == no_train)) -> tx_lights(opp(stateL)) . turnoff_lights . LIGHTS(stateL=opp(stateL))
+((stateL == off) && (stateBe == on ) && (T ==    train)) -> error . delta
+((stateL == off) && (stateBe == on ) && (T == no_train)) -> error . delta
+((stateL == off) && (stateBe == off) && (T ==    train)) -> tx_lights(opp(stateL)) . turnon_lights . LIGHTS(stateL=opp(stateL))
+ sum s: State . rx_bells_to_lights(s)      . LIGHTS(stateBe = s)
+ sum t: Train . rx_sensors_agg_to_lights(t) . LIGHTS(T = t)
;

proc BELLS(stateBe: State,stateL: State,stateBa: State, T : Train) =
 ((stateBe == on ) && (stateL == on ) && (stateBa == off) && (T == no_train)) -> tx_bells(opp(stateBe)) . turnoff_bells . BELLS(stateBe=opp(stateBe))
+((stateBe == on ) && (stateL == off) && (stateBa == on ) && (T ==    train)) -> error . delta
+((stateBe == on ) && (stateL == off) && (stateBa == on ) && (T == no_train)) -> error . delta
+((stateBe == on ) && (stateL == off) && (stateBa == off) && (T ==    train)) -> error . delta
+((stateBe == on ) && (stateL == off) && (stateBa == off) && (T == no_train)) -> error . delta

+((stateBe == off) && (stateL == on ) && (stateBa == on ) && (T ==    train)) -> error . delta
+((stateBe == off) && (stateL == on ) && (stateBa == on ) && (T == no_train)) -> error . delta
+((stateBe == off) && (stateL == on ) && (stateBa == off) && (T ==    train)) -> tx_bells(opp(stateBe)) . turnon_bells . BELLS(stateBe=opp(stateBe))
+((stateBe == off) && (stateL == off) && (stateBa == on ) && (T ==    train)) -> error . delta
+((stateBe == off) && (stateL == off) && (stateBa == on ) && (T == no_train)) -> error . delta
+ sum s: State . rx_lights(s)      . BELLS(stateL  = s)
+ sum s: State . rx_barriers(s)    . BELLS(stateBa = s)
+ sum t: Train . rx_sensors_agg_to_bells(t) . BELLS(T = t)
;

proc BARRIERS(stateBa: State,stateBe: State,T : Train) =
 ((stateBa == on ) && (stateBe == on ) && (T == no_train)) -> tx_barriers(opp(stateBa)) . raise_barriers . BARRIERS(stateBa=opp(stateBa))
+((stateBa == on ) && (stateBe == off) && (T ==    train)) -> error . delta
+((stateBa == on ) && (stateBe == off) && (T == no_train)) -> error . delta
+((stateBa == off) && (stateBe == on ) && (T ==    train)) -> tx_barriers(opp(stateBa)) . lower_barriers . BARRIERS(stateBa=opp(stateBa))
+ sum s: State . rx_bells_to_barriers(s)     . BARRIERS(stateBe = s)
+ sum t: Train . rx_sensors_agg_to_barriers(t) . BARRIERS(T = t)
;

%TODO[2016-10-21 Fri]: do not use proc but implement comm
%TODO[2016-10-26 Wed,C]: at least made it working better by just using . instead of |
proc tx_bells(s : State)
	= tx_bells_to_lights(s) . tx_bells_to_barriers(s);

proc tx_sensors_agg (T : Train)
	= tx_sensors_agg_to_lights(T) . tx_sensors_agg_to_bells(T) . tx_sensors_agg_to_barriers(T);

init %hide(
	%{
		%comm_lights,
		%comm_bells,
		%comm_barriers,
		%comm_sensors,
		%comm_sensors_agg,
		%rx_sensors,
		%rx_sensors_agg,
		%rx_barriers,
		%rx_lights,
		%rx_bells,
		%tx_sensors,
		%tx_sensors_agg,
		%tx_barriers,
		%tx_lights,
		%tx_bells
	%},
	allow(
		{
			comm_lights,
			comm_bells_to_lights,
			comm_bells_to_barriers,
			comm_barriers,
			comm_sensors,
			comm_sensors_agg_to_lights,
			comm_sensors_agg_to_bells,
			comm_sensors_agg_to_barriers,
			turnon_lights,
			turnoff_lights,
			turnon_bells,
			turnoff_bells,
			lower_barriers,
			raise_barriers,
			done,
			error,
			set_sensors
		},
		comm(
			{
				tx_lights                 | rx_lights                  -> comm_lights,
				tx_bells_to_lights        | rx_bells_to_lights         -> comm_bells_to_lights,
				tx_bells_to_barriers      | rx_bells_to_barriers       -> comm_bells_to_barriers,
				tx_barriers               | rx_barriers                -> comm_barriers,
				tx_sensors                | rx_sensors                 -> comm_sensors,
				tx_sensors_agg_to_lights  | rx_sensors_agg_to_lights   -> comm_sensors_agg_to_lights,
				tx_sensors_agg_to_bells   | rx_sensors_agg_to_bells    -> comm_sensors_agg_to_bells,
				tx_sensors_agg_to_barriers| rx_sensors_agg_to_barriers -> comm_sensors_agg_to_barriers
			},
			SENSORS(t1, idle, off, off, off)     ||
			SENSORS(t2, idle, off, off, off)     ||
			SENSORAGGREGATOR(no_train, no_train) ||
			LIGHTS(off,off,no_train)             ||
			BELLS(off,off,off,no_train)          ||
			BARRIERS(off,off,no_train)
		)
	%)
);